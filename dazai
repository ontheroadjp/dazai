#!/bin/bash

SCRIPT_FILE_NAME=$(basename $0)
SCRIPT_NAME=${SCRIPT_FILE_NAME%.*}
SELF=$(cd $(dirname $0); pwd)
VERSION="1.0.0"
LOGGING=false
SEPARATOR="---------------------------"

function _usage() {
    echo "Usage: ${SCRIPT_NAME} [OPTIONS] [SEED_FILE]"
    echo "  This script is ~."
    echo
    echo "Options:"
    echo "  -h, --help                     Show help."
    echo "  -v, --version                  Show script version."
    echo "  -n, --length ARG               Length of output chars."
    echo "  -n, --number ARG               Number of output char lines."
    echo "  -0, --out ARG                  Output file path."
    echo "      --no-symbol                No symbol within output."
    echo "      --verbose                  Print various logging information"
    echo
    exit 1
}

function _log() {
    ${LOGGING} && echo "$@" || return 0
}

function _err() {
    echo "[err] $1" && exit 1
}

function _args_count() {
    echo ${#ARG_VALUES[@]}
}

function _is_exist() {
    [ -f $1 ] || [ -d $1 ] || [[ $(type $1) ]]
}

function _verbose() {
    _log "SEED_DIR: ${SEED_DIR}"
    _log "OUT_CHAR_LENGTH: ${OUT_CHAR_LENGTH}"
    _log "OUT_LINE_NUMBER: ${OUT_LINE_NUMBER}"
    _log "NO_SYMBOL: ${NO_SYMBOL}"
    _log "OUT_FILE: ${OUT_FILE}"
    _log ${SEPARATOR}
}

SEED_DIR="${SELF}/seed"
OUT_CHAR_LENGTH=20
OUT_LINE_NUMBER=1
NO_SYMBOL=false
OUT_FILE=''

function _main() {
    local format=${ARG_VALUES[0]}
    case ${format} in
        'han' | 'hankaku' )
            ${NO_SYMBOL} && {
                seed=($(cat ${SEED_DIR}/hankaku.txt \
                        | head -n 3 \
                        | sed -e 's/ //g' \
                        | fold -w1))
            } || {
                set -f
                seed=($(cat ${SEED_DIR}/hankaku.txt \
                        | fold -w 1))
                set +f
            }
            ;;
        'zen' | 'zenkaku')
            ${NO_SYMBOL} && {
                #seed=($(fold -w 1 ${SEED_DIR}/zenkaku.txt))
                seed=($(cat ${SEED_DIR}/zenkaku.txt | head -n 10 | fold -w 1))
            } || {
                seed=($(fold -w 1 ${SEED_DIR}/zenkaku.txt))
            }
            ;;
        *)
            seed=($(fold -w 1 ${SEED_DIR}/zenkaku.txt \
                                ${SEED_DIR}/hankaku.txt ))
            ;;
    esac

    set -f
    for n in $(seq ${OUT_LINE_NUMBER}); do
        for i in $(seq ${OUT_CHAR_LENGTH}); do
            char_line+=${seed[$((${RANDOM} % ${#seed[*]}))]}
        done

        [ -z ${OUT_FILE} ] && {
            echo ${char_line[@]}
        } || {
            echo "${char_line[@]}" >> ${OUT_FILE}
        }

        char_line=""
    done
    set +f
}

# -------------------------------------------------------------
# Arguments and Options
# -------------------------------------------------------------

ARG_VALUES=()
SAMPLE_OPTION_A=""
SAMPLE_OPTION_B=""
SAMPLE_OPTION_FLAG_N=false
SAMPLE_OPTION_FLAG_L=false
SAMPLE_OPTION_FLAG_P=false

function _analyse_args_and_options() {
    while (( $# > 0 ))
    do
        case $1 in
            -h | --help)
                _usage
                exit 1
                ;;
            -v | --version)
                echo ${VERSION}
                exit 1
                ;;
            --verbose)
                LOGGING=true
                shift
                ;;
            -l | --length)                  # Must have argument
                if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                    _err "-l option requires a value."
                fi
                OUT_CHAR_LENGTH=$2
                shift 2
                ;;
            -n | --number)                  # Must have argument
                if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                    _err "-n option requires a value."
                fi
                OUT_LINE_NUMBER=$2
                shift 2
                ;;
            -o | --out)                  # Must have argument
                if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                    _err "-o option requires a value."
                fi
                OUT_FILE=$2
                shift 2
                ;;
            -- | -) # after this all args include '-xx', will treat arg value
                shift
                ARG_VALUES+=( "$@" )
                break
                ;;
            --*) # for true or false flags, no argument
                if [[ "$1" =~ 'no-symbol' ]]; then
                    NO_SYMBOL=true
                fi
                shift
                ;;
            *)
                ARG_VALUES+=("$1")
                shift
                ;;
        esac
    done
}

function _verify_static_vars() {
    [ ! -z ${OUT_FILE} ] && [ ! -d $(dirname ${OUT_FILE}) ] && {
        _err "No such directory. - $(dirname ${OUT_FILE})"
    }
    [ ! -z ${OUT_FILE} ] && [ -f ${OUT_FILE} ] && {
        _err "File already exist. - ${OUT_FILE}"
    }
   :
}

# -------------------------------------------------------------
# Main Routine
# -------------------------------------------------------------
_analyse_args_and_options $@ && {
    _verbose
    _verify_static_vars && {
        _main
    }
}
exit 0
